{% extends "docs/index.html.twig"  %}
{% import "docs/macros.html.twig" as docs %}
{% set section = 7 %}

{% block doc %}

    <h1>Search</h1>

    <p>
        XIVAPI provides the ability to quickly search all game content via Elasticsearch.
        This search endpoint only searches game content and not: characters, free companies,
        linkshells or pvp teams. Those have their own dedicated search endpoints as they
        relay to Lodestone.
    </p>


    {{ docs.gap() }}

    {# Search #}
    {{ docs.api('/search', '/search?string=aiming', 'search') }}

    <p>
        A <code>string</code> or <code>filter</code> is required to search.
    </p>

    <p>
        Search for something! The search is multi-content and contains combined data,
        this means your search request covers a vast amount of selected content
        (which you can further extend via filters) and results are combined based on best-case matching.
    </p>



    <h4>Params</h4>

    <h2 style="font-size: 16px;">Deprecation Notice:</h2>
    <p class="note">
        Search filters are now in maintenance mode. We won't be adding any additional filter abilities.
        If you want uncapped power for search, please considering using Elasticsearch queries, view the
        <a href="#advanced">advanced section</a> for more information. Note that the majority of users
        will <i>not</i> need this, and no support or additional docs are offered.
    </p>

    <table class="param-table">
        <thead>
        <tr>
            <th width="25%">Param</th>
            <th width="75%">Description</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>indexes</td>
            <td>
                <p>Search a specific series of indexes separated by commas.</p>
                <p><strong>Accepts:</strong> <em>{{ search_indexes|join(', ') }}</em></p>
            </td>
        </tr>
        <tr>
            <td>string</td>
            <td>
                <p>The string to search for. The results for this are affected by <em>string_column</em>
                    and <em>string_algo</em>.</p>
            </td>
        </tr>
        <tr>
            <td>string_algo</td>
            <td>
                <p>The search algorithm to use for string matching.</p>
                <p><strong>Default:</strong> <em>{{ search_algo_default }}</em></p>
                <p>For more information, read: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.8/term-level-queries.html>Term Level Queries</a> on Elasticsearch.</p>
                <p><strong>Supported Algorithms</strong>:</p>
                <table class="param-table mini-table">
                    <tr>
                        <td width="25%">custom</td>
                        <td>wildcard + fuzzy</td>
                    </tr>
                    <tr>
                        <td>custom</td>
                        <td>wildcard</td>
                    </tr>
                    <tr>
                        <td>wildcard</td>
                        <td>Post wildcard, eg: Aim*</td>
                    </tr>
                    <tr>
                        <td>wildcard_plus</td>
                        <td>Post &amp; Prefix wildcard, eg: *Aim*</td>
                    </tr>
                    <tr>
                        <td>fuzzy</td>
                        <td>Perform a fuzzy search. Fuzziness = 5</td>
                    </tr>
                    <tr>
                        <td>term</td>
                        <td>Match whole words by keyword terms.</td>
                    </tr>
                    <tr>
                        <td>prefix</td>
                        <td>Match a prefix, like a cheap auto-complete</td>
                    </tr>
                    <tr>
                        <td>match</td>
                        <td>Perform a match query.</td>
                    </tr>
                    <tr>
                        <td>match_phrase</td>
                        <td>Perform a match phrase query</td>
                    </tr>
                    <tr>
                        <td>match_phrase_prefix</td>
                        <td>Perform a match phrase prefix query</td>
                    </tr>
                    <tr>
                        <td>multi_match</td>
                        <td>Match against multiple string columns, separated by a comma.</td>
                    </tr>
                    <tr>
                        <td>query_string</td>
                        <td>Perform a query string, this has lots of logic!</td>
                    </tr>

                </table>
            </td>
        </tr>
        <tr>
            <td>string_column</td>
            <td>
                <p>The column to use in string searches.</p>
            </td>
        </tr>
        <tr>
            <td>page</td>
            <td>Set the search results page, this controls <em>pagination</em> in the response</td>
        </tr>
        <tr>
            <td>sort_field</td>
            <td>Sort results by a specific field, you will loose scoring.</td>
        </tr>
        <tr>
            <td>sort_order</td>
            <td>Order the <em>sort_field</em> by a specific direction, either: <em>asc</em> or <em>desc</em>.</td>
        </tr>
        <tr>
            <td>limit</td>
            <td>Limit the number of results to show. (from 1 to 100)</td>
        </tr>
        </tbody>
    </table>

    {{ docs.gap() }}

    <h4 id="filters">Filters</h4>

    <p>Filters can be performed in the following format:</p>
    <p><code>[FieldName][Operator][Value]</code>, eg: <code>LevelItem>=150</code></p>
    <p>You can provide a comma separated list of filters as an "AND" exclusive query, eg:</p>

    <code class="box">filters=LevelItem>35,LevelItem<=40,ClassJobCategory.ID=38</code>
    <p>
        eg: <a href="{{ app.request.getSchemeAndHttpHost() }}/search?filters=LevelItem>35,LevelItem<=40,ClassJobCategory.ID=38">{{ app.request.getSchemeAndHttpHost() }}/search?filters=LevelItem>35,LevelItem<=40,ClassJobCategory.ID=38</a>
    </p>

    <p><strong>Accepted Operators:</strong></p>

    <table>
        <thead>
        <tr>
            <th width="15%">Operator</th>
            <th>Information</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>=</td>
            <td>Performs a `match`, eg: LevelItem=50 means only items that are level 50.</td>
        </tr>
        <tr>
            <td>&gt;</td>
            <td>Performs a "Greater than" `range` query. (gt)</td>
        </tr>
        <tr>
            <td>&gt;=</td>
            <td>Performs a "Greater than or equal to" `range` query. (gte)</td>
        </tr>
        <tr>
            <td>&lt;</td>
            <td>Performs a "Less than" `range` query. (gt)</td>
        </tr>
        <tr>
            <td>&lt;=</td>
            <td>Performs a "Less than" `range` query. (gt)</td>
        </tr>
        <tr>
            <td>|=</td>
            <td>Performs a "IN" `list` query.</td>
        </tr>
        <tr>
            <td>!</td>
            <td>Performs a "must exist" query.</td>
        </tr>
        <tr>
            <td>!!</td>
            <td>Performs a "must_not exist" query.</td>
        </tr>
        </tbody>
    </table>

    {{ docs.gap() }}

    {# Lore #}
    {{ docs.api('/lore', '/lore?string=legendary', 'lore') }}

    <div class="lore">
        <div>
            <img src="/ui/lore.png" height="82">
        </div>
        <div>
            <p>
                Search for lore! This is a special built search endpoint which searches a string through
                various lore specific content. The endpoint has all the same features as the <code>/search</code>
                endpoint including <strong>Advanced Elasticsearch Queries</strong>.
            </p>
        </div>
    </div>

    <p>
        The "Data" column provides more information about the source of the lore entry such as the content name and icon. You can access
        this using the "columns" query parameter, for example:
    </p>
    <code class="box">columns=Data</code>
    <p>
        eg: <a href="{{ app.request.getSchemeAndHttpHost() }}/lore?string=legendary&columns=Text,Data">{{ app.request.getSchemeAndHttpHost() }}/lore?string=legendary&columns=Text,Data</a>
    </p>

    <p>
        The current content included in lore are:
    </p>

    <ul>
        <li>Cutscene Subtitles</li>
        <li>All Quest Dialogue and text data</li>
        <li>Item Descriptions</li>
        <li>Leve text data</li>
        <li>FATE text data</li>
        <li>NPC Yells</li>
        <li>NPC Balloon tooltips</li>
        <li>Instance Content and Public content text data</li>
        <li>Achievement Descriptions</li>
        <li>Default Talk entries</li>
        <li>Event Item Help text</li>
        <li>Mounts and Minion text</li>
        <li>Status descriptions</li>
        <li>Triple Triad Card text</li>
    </ul>

    <p>
        If you want more, just hop on discord!
    </p>

    <hr>

    <h2 id="advanced">Advanced Elasticsearch Queries</h2>

    <p>
        As search just uses the powerful <strong>Elasticsearch</strong>, you can infact just provide
        an Elasticsearch valid JSON query to the endpoint as the "body" param and it will be processed.
        This bypasses all of the normal <code>GET</code> attributes you see above <small>(excluding: indexes)</small>
        and allows you complete control over how you build the Elastic query. Be aware that we run ES 6.8, and so
        any reference documentation you search for should reflect that as ES changes query syntax across versions.
    </p>

    <p>
        You can learn more about Elasticsearch queries via the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.8/query-dsl.html">Query DSL Documentation</a>
    </p>

    <p>
        <strong>How do I get this awesome power!?</strong>
    </p>

    <p>
        By simply sending a JSON payload with the Elasticsearch query in the "body" field, search will switch to
        advanced mode whenever it sees a query in the "body" field.
        You can test your DSL using the <a href="{{ path('search_playground') }}" target="_blank">Search Playground</a>.
    </p>

    <p>The payload is in the following format:</p>

    <pre class="box">{
    "body": {
        // The Elastic Search payload
    },
    "indexes": "comma,list,of,indexes",
}</pre>

    <p>Here is a full working example:</p>

    <pre class="box">{
  "indexes": <em>"item,achievement,instantcontent"</em>,
  "body": {
    "query": {
      "bool": {
        "must": [
          {
            "wildcard": {
              <em>"NameCombined_en": "*aiming*"</em>
            }
          }
        ],
        "filter": [
          {
            "range": {
              <em>"ItemSearchCategory.ID"</em>: {
                <em>"gt": "1"</em>
              }
            }
          },
          {
            "range": {
              <em>"LevelItem"</em>: {
                <em>"gte": "100"</em>
              }
            }
          },
          {
            "range": {
              <em>"LevelItem"</em>: {
                <em>"lte": "125"</em>
              }
            }
          }
        ]
      }
    },
    "from": 0,
    "size": 10,
    "sort": [
      {
        <em>"LevelItem": "desc"</em>
      }
    ]
  }
}</pre>

{% endblock %}
